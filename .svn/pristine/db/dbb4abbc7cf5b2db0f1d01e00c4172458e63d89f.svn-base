
import Data.Char (isDigit)
import System.Environment
import Text.Read
import Data.Maybe
    
--avanca :: [String] -> Int -> [String]
--avanca m t = avancaAux (length head m) m t

--avancaAux :: Int -> [String] -> Int -> [String]
--avancaAux d m t | t <= (d-2)^2 = blocos d m t (1,1)

temBomba :: [String] -> String -- localiza as bombas que foram plantadas no mapa
temBomba [] = []
temBomba ((h:t):ts) | h == '*' = (h:t) ++ temBomba ts
                    | otherwise = temBomba ts

--retiraSegundo :: [String] -> [String] -- e dada uma bomba e retira um segundo ao cornometro dela
--retiraSegundo [] = [] 
--retiraSegundo (h:t) = [(drop 1 h) ++ [(isDigit (h !! 10) - 1)]] ++ retiraSegundo t   

retiraSegundo :: String -> Int -> String -> [String]
retiraSegundo [] c i = []
retiraSegundo (h:ts) c i |c == 5 = [(h:ts)]
                         |h == ' ' = [i] ++ retiraSegundo ts (c+1) ""
                         |otherwise = retiraSegundo ts c (i ++ h)




--blocos :: Int -> [String] -> Int -> (Int,Int) -> [String]
 --blocos d m t (x,y) | x < d = replace '#' blocos d m (t+1) (x+1,y)
                        

--replace (x:xs) = '#':xs 
--main :: IO ()
--main = do
  --  a <- getArgs
    --let ticks = readMaybe (a !! 0)
    --w <- getContents
    --if isJust ticks
      --  then putStr $ unlines $ avanca (lines w) (fromJust ticks)
        --else putStrLn "Parâmetros inválidos"